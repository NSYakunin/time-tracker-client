import { useEffect, useState } from 'react'
import axiosClient from '../../api/axiosClient'
import '../../styles/tasks.css'
import { useNavigate } from 'react-router-dom'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–¥–∞—á–∏ —Å –±—ç–∫–µ–Ω–¥–∞
interface Task {
	id: string
	title: string
	minutesSpent: number
	date: string
	progress: number
}

// –î–æ–ø. –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
interface EditState {
	[taskId: string]: boolean
}

export default function TaskList() {
	const [tasks, setTasks] = useState<Task[]>([])
	const [title, setTitle] = useState('')
	const [hours, setHours] = useState(0)
	const [minutes, setMinutes] = useState(0)
	const [date, setDate] = useState('')

	// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, –∫–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	const [editMode, setEditMode] = useState<EditState>({})
	// –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	const [editTitle, setEditTitle] = useState('')
	const [editHours, setEditHours] = useState(0)
	const [editMinutes, setEditMinutes] = useState(0)
	const [editDate, setEditDate] = useState('')
	const [editProgress, setEditProgress] = useState(0)

	const [userEmail, setUserEmail] = useState('')
	const navigate = useNavigate()

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	const loadTasks = async () => {
		try {
			const tasksRes = await axiosClient.get('/taskentries')
			setTasks(tasksRes.data)

			const userRes = await axiosClient.get('/auth/me')
			setUserEmail(userRes.data.email)
		} catch (err) {
			// –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
			navigate('/')
		}
	}

	useEffect(() => {
		loadTasks()
	}, [])

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
	const handleAddTask = async () => {
		try {
			const totalMinutes = hours * 60 + minutes
			await axiosClient.post('/taskentries', {
				title,
				minutesSpent: totalMinutes,
				date,
			})
			setTitle('')
			setHours(0)
			setMinutes(0)
			setDate('')
			loadTasks()
		} catch (err) {
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
		}
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
	const handleDeleteTask = async (id: string) => {
		if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
			try {
				await axiosClient.delete(`/taskentries/${id}`)
				loadTasks()
			} catch (err) {
				alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
			}
		}
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const formatTime = (minutes: number) => {
		const hrs = Math.floor(minutes / 60)
		const mins = minutes % 60
		return `${hrs > 0 ? `${hrs} —á.` : ''} ${mins} –º–∏–Ω.`
	}

	// –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
	const enableEditMode = (task: Task) => {
		setEditMode({ ...editMode, [task.id]: true })

		// –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
		setEditTitle(task.title)
		const hrs = Math.floor(task.minutesSpent / 60)
		const mins = task.minutesSpent % 60
		setEditHours(hrs)
		setEditMinutes(mins)
		setEditDate(task.date.split('T')[0]) // "2023-06-01..."
		setEditProgress(task.progress)
	}

	// –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
	const disableEditMode = (taskId: string) => {
		setEditMode({ ...editMode, [taskId]: false })
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
	const handleSaveTask = async (task: Task) => {
		try {
			const totalMinutes = editHours * 60 + editMinutes
			await axiosClient.put(`/taskentries/${task.id}`, {
				title: editTitle,
				minutesSpent: totalMinutes,
				date: editDate,
				progress: editProgress,
			})
			setEditMode({ ...editMode, [task.id]: false })
			loadTasks()
		} catch (err) {
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
		}
	}

	// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–ª–æ–≥–∏–Ω)
	const handleLogout = () => {
		localStorage.removeItem('token')
		navigate('/')
	}

	// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
	const handleSettings = () => {
		navigate('/settings')
	}

	return (
		<div className='tasks-container'>
			<h2>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>

			<div className='user-info'>
				<span>
					<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {userEmail}
				</span>
				<span>
					<strong>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</strong> {tasks.length}
				</span>
				<div>
					<button onClick={handleSettings} className='settings-button'>
						–ù–∞—Å—Ç—Ä–æ–π–∫–∏
					</button>
					<button onClick={handleLogout} className='logout-button'>
						–í—ã–π—Ç–∏
					</button>
				</div>
			</div>

			<div className='task-form'>
				<input
					placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
					value={title}
					onChange={e => setTitle(e.target.value)}
					required
				/>

				<div className='time-inputs'>
					<input
						type='number'
						min={0}
						placeholder='–ß–∞—Å—ã'
						value={hours}
						onChange={e => setHours(Number(e.target.value))}
					/>
					<input
						type='number'
						min={0}
						max={59}
						placeholder='–ú–∏–Ω—É—Ç—ã'
						value={minutes}
						onChange={e => setMinutes(Number(e.target.value))}
					/>
				</div>

				<input
					type='date'
					value={date}
					onChange={e => setDate(e.target.value)}
					required
				/>

				<button onClick={handleAddTask}>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
			</div>

			<table className='task-table'>
				<thead>
					<tr>
						<th>‚Ññ</th>
						<th>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</th>
						<th>–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏</th>
						<th>–î–∞—Ç–∞</th>
						<th>–ü—Ä–æ–≥—Ä–µ—Å—Å</th>
						<th>–î–µ–π—Å—Ç–≤–∏—è</th>
					</tr>
				</thead>
				<tbody>
					{tasks.map((task, index) => {
						const isEditing = editMode[task.id] || false

						// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª–æ—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞—è –∑–∞–¥–∞—á–∞)
						const progressWidth = `${task.progress}%`

						return (
							<tr key={task.id} className='task-row'>
								<td>{index + 1}</td>

								{/* –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ */}
								{!isEditing ? (
									<>
										<td>{task.title}</td>
										<td>{formatTime(task.minutesSpent)}</td>
										<td>{new Date(task.date).toLocaleDateString()}</td>
										<td>
											{/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å–æ–π */}
											<div className='progress-container'>
												<div
													className='progress-bar'
													style={{ width: progressWidth }}
												>
													{task.progress}%
												</div>
											</div>
										</td>
									</>
								) : (
									<>
										<td>
											<input
												value={editTitle}
												onChange={e => setEditTitle(e.target.value)}
											/>
										</td>
										<td>
											<input
												type='number'
												min={0}
												placeholder='–ß–∞—Å—ã'
												value={editHours}
												onChange={e => setEditHours(Number(e.target.value))}
											/>
											<input
												type='number'
												min={0}
												max={59}
												placeholder='–ú–∏–Ω—É—Ç—ã'
												value={editMinutes}
												onChange={e => setEditMinutes(Number(e.target.value))}
											/>
										</td>
										<td>
											<input
												type='date'
												value={editDate}
												onChange={e => setEditDate(e.target.value)}
											/>
										</td>
										<td>
											<input
												type='number'
												min={0}
												max={100}
												value={editProgress}
												onChange={e => setEditProgress(Number(e.target.value))}
											/>
										</td>
									</>
								)}

								<td>
									{/* –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–û—Ç–º–µ–Ω–∏—Ç—å */}
									{!isEditing ? (
										<>
											<button
												onClick={() => enableEditMode(task)}
												className='edit-button'
											>
												‚úèÔ∏è
											</button>
											<button
												onClick={() => handleDeleteTask(task.id)}
												className='delete-button'
											>
												üóëÔ∏è
											</button>
										</>
									) : (
										<>
											<button
												onClick={() => handleSaveTask(task)}
												className='save-button'
											>
												–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
											</button>
											<button
												onClick={() => disableEditMode(task.id)}
												className='cancel-button'
											>
												–û—Ç–º–µ–Ω–∏—Ç—å
											</button>
										</>
									)}
								</td>
							</tr>
						)
					})}
				</tbody>
			</table>
		</div>
	)
}
