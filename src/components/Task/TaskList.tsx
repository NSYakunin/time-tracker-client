import { useEffect, useRef, useState } from 'react'
import axiosClient from '../../api/axiosClient'
import '../../styles/tasks.css'
import { useNavigate } from 'react-router-dom'
import {
	LocalizationProvider,
	TimePicker,
	DatePicker,
} from '@mui/x-date-pickers'
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'
import dayjs, { Dayjs } from 'dayjs'
import 'dayjs/locale/ru'

/* ---------- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã ---------- */
interface Task {
	id: string
	title: string
	minutesSpent: number
	date: string
	progress: number
}
interface EditState {
	[taskId: string]: boolean
}

/* ---------- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ---------- */
export default function TaskList() {
	const [tasks, setTasks] = useState<Task[]>([])

	/* –ø–æ–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */
	const [title, setTitle] = useState('')
	const [time, setTime] = useState<Dayjs | null>(dayjs().hour(0).minute(0))
	const [date, setDate] = useState<Dayjs | null>(dayjs())

	/* —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */
	const [editMode, setEditMode] = useState<EditState>({})
	const [editTitle, setEditTitle] = useState('')
	const [editTime, setEditTime] = useState<Dayjs | null>(
		dayjs().hour(0).minute(0)
	)
	const [editDate, setEditDate] = useState<Dayjs | null>(dayjs())
	const [editProgress, setEditProgress] = useState(0)

	const editTitleRef = useRef<HTMLTextAreaElement | null>(null)

	const [userEmail, setUserEmail] = useState('')
	const navigate = useNavigate()

	/* ---------- API ---------- */
	const loadTasks = async () => {
		try {
			const [taskRes, userRes] = await Promise.all([
				axiosClient.get('/taskentries'),
				axiosClient.get('/auth/me'),
			])
			setTasks(taskRes.data)
			setUserEmail(userRes.data.email)
		} catch {
			navigate('/')
		}
	}
	useEffect(() => {
		loadTasks()
	}, [])

	/* ---------- helpers ---------- */
	const totalMinutes = (d: Dayjs | null) =>
		(d?.hour() ?? 0) * 60 + (d?.minute() ?? 0)

	const formatTime = (m: number) =>
		`${Math.floor(m / 60) ? `${Math.floor(m / 60)} —á.` : ''} ${m % 60} –º–∏–Ω.`

	const autoGrow = (el: HTMLTextAreaElement | null) => {
		if (!el) return
		el.style.height = 'auto'
		el.style.height = `${el.scrollHeight}px`
	}

	const enableEditMode = (t: Task) => {
		setEditMode({ [t.id]: true })
		setEditTitle(t.title)
		setEditTime(
			dayjs()
				.hour(Math.floor(t.minutesSpent / 60))
				.minute(t.minutesSpent % 60)
		)
		setEditDate(dayjs(t.date))
		setEditProgress(t.progress)
		/* –¥–∞—ë–º –±—Ä–∞—É–∑–µ—Ä—É –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å <textarea>, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–¥–≥–æ–Ω—è–µ–º –≤—ã—Å–æ—Ç—É */
		setTimeout(() => autoGrow(editTitleRef.current), 0)
	}
	const disableEditMode = () => setEditMode({})

	/* ---------- CRUD ---------- */
	const handleAddTask = async () => {
		try {
			await axiosClient.post('/taskentries', {
				title,
				minutesSpent: totalMinutes(time),
				date: date?.format('YYYY-MM-DD'),
			})
			setTitle('')
			setTime(dayjs().hour(0).minute(0))
			setDate(dayjs())
			loadTasks()
		} catch {
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
		}
	}

	const handleDeleteTask = async (id: string) => {
		if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) return
		try {
			await axiosClient.delete(`/taskentries/${id}`)
			loadTasks()
		} catch {
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏')
		}
	}

	const handleSaveTask = async (task: Task) => {
		try {
			await axiosClient.put(`/taskentries/${task.id}`, {
				title: editTitle,
				minutesSpent: totalMinutes(editTime),
				date: editDate?.format('YYYY-MM-DD'),
				progress: editProgress,
			})
			disableEditMode()
			loadTasks()
		} catch {
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏')
		}
	}

	/* ---------- –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ---------- */
	const grouped: Record<string, Task[]> = {}
	tasks.forEach(t => {
		const iso = t.date.split('T')[0] // YYYY-MM-DD
		if (!grouped[iso]) grouped[iso] = []
		grouped[iso].push(t)
	})
	const sortedDays = Object.keys(grouped).sort() // ISO-—Å—Ç—Ä–æ–∫–∏ &rarr; –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ

	/* ---------- UI ---------- */
	return (
		<div className='tasks-container'>
			<h2>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>

			{/* –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
			<div className='user-info'>
				<span>
					<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {userEmail}
				</span>
				<span>
					<strong>–í—Å–µ–≥–æ –∑–∞–¥–∞—á:</strong> {tasks.length}
				</span>
				<div>
					<button
						onClick={() => navigate('/settings')}
						className='settings-button'
					>
						–ù–∞—Å—Ç—Ä–æ–π–∫–∏
					</button>
					<button
						onClick={() => {
							localStorage.removeItem('token')
							navigate('/')
						}}
						className='logout-button'
					>
						–í—ã–π—Ç–∏
					</button>
				</div>
			</div>

			{/* —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
			<LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale='ru'>
				<div className='task-form'>
					<input
						placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
						value={title}
						onChange={e => setTitle(e.target.value)}
						required
						style={{ flex: 2 }}
					/>

					<TimePicker
						ampm={false}
						value={time}
						onChange={setTime}
						slotProps={{ textField: { variant: 'outlined', size: 'small' } }}
						sx={{ flex: 1, minWidth: 110 }}
					/>

					<DatePicker
						value={date}
						onChange={setDate}
						format='DD.MM.YYYY'
						slotProps={{ textField: { variant: 'outlined', size: 'small' } }}
						sx={{ flex: 1, minWidth: 120 }}
					/>

					<button onClick={handleAddTask}>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
				</div>
			</LocalizationProvider>

			{/* —Å–ø–∏—Å–æ–∫ –ø–æ –¥–Ω—è–º */}
			{sortedDays.map(iso => {
				const label = dayjs(iso).format('DD.MM.YYYY')
				return (
					<div key={iso} className='task-group'>
						<h3 className='day-heading'>{label}</h3>

						<table className='task-table'>
							<thead>
								<tr>
									<th className='smallHeaderCell fixed-40'>‚Ññ</th>
									<th className='smallHeaderCell'>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</th>
									<th className='smallHeaderCell fixed-120'>
										–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
									</th>
									<th className='smallHeaderCell fixed-120'>–î–∞—Ç–∞</th>
									<th className='smallHeaderCell fixed-120'>–ü—Ä–æ–≥—Ä–µ—Å—Å</th>
									<th className='smallHeaderCell fixed-160'>–î–µ–π—Å—Ç–≤–∏—è</th>
								</tr>
							</thead>

							<tbody>
								{grouped[iso].map((task, idx) => {
									const editing = !!editMode[task.id]
									const barWidth = `${task.progress}%`

									return (
										<tr key={task.id} className='task-row'>
											<td className='fixed-40'>{idx + 1}</td>

											{!editing && (
												<>
													<td className='task-title-cell'>{task.title}</td>
													<td className='fixed-120'>
														{formatTime(task.minutesSpent)}
													</td>
													<td className='fixed-120 small-date'>
														{dayjs(task.date).format('DD.MM.YYYY')}
													</td>
													<td className='fixed-120'>
														<div className='progress-container edit-equal'>
															<div
																className='progress-bar'
																style={{ width: barWidth }}
															>
																{task.progress}%
															</div>
														</div>
													</td>
												</>
											)}

											{editing && (
												<>
													<td>
														<textarea
															ref={editTitleRef}
															className='edit-title'
															value={editTitle}
															rows={1}
															onChange={e => {
																setEditTitle(e.target.value)
																autoGrow(e.target)
															}}
														/>
													</td>
													<td className='fixed-120'>
														<LocalizationProvider
															dateAdapter={AdapterDayjs}
															adapterLocale='ru'
														>
															<TimePicker
																ampm={false}
																value={editTime}
																onChange={setEditTime}
																slotProps={{
																	textField: {
																		variant: 'outlined',
																		size: 'small',
																	},
																}}
															/>
														</LocalizationProvider>
													</td>
													<td className='fixed-120'>
														<LocalizationProvider
															dateAdapter={AdapterDayjs}
															adapterLocale='ru'
														>
															<DatePicker
																value={editDate}
																onChange={setEditDate}
																format='DD.MM.YYYY'
																slotProps={{
																	textField: {
																		variant: 'outlined',
																		size: 'small',
																	},
																}}
															/>
														</LocalizationProvider>
													</td>
													<td className='fixed-120'>
														<div className='progress-container edit-equal'>
															<div
																className='progress-bar'
																style={{ width: `${editProgress}%` }}
															>
																{editProgress}%
															</div>
														</div>
														<input
															type='range'
															min={0}
															max={100}
															value={editProgress}
															onChange={e => setEditProgress(+e.target.value)}
															className='progress-slider'
														/>
													</td>
												</>
											)}

											<td className='fixed-160'>
												{!editing ? (
													<div className='action-group'>
														<button
															onClick={() => enableEditMode(task)}
															className='icon-btn edit'
															title='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
														>
															‚úèÔ∏è
														</button>
														<button
															onClick={() => handleDeleteTask(task.id)}
															className='icon-btn delete'
															title='–£–¥–∞–ª–∏—Ç—å'
														>
															üóëÔ∏è
														</button>
													</div>
												) : (
													<div className='action-group'>
														<button
															onClick={() => handleSaveTask(task)}
															className='action-btn save'
														>
															üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
														</button>
														<button
															onClick={disableEditMode}
															className='action-btn cancel'
														>
															‚úñ –û—Ç–º–µ–Ω–∏—Ç—å
														</button>
													</div>
												)}
											</td>
										</tr>
									)
								})}
							</tbody>
						</table>
					</div>
				)
			})}

			{/* –∑–∞–ø–∞—Å –ø–æ–¥ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ—É—Ç–µ—Ä */}
			<div className='tasks-bottom-spacer' />
		</div>
	)
}
